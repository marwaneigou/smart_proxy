import os
import re
import tempfile
from mitmproxy import ctx

MALWARE_PATTERNS = [
    b'MZ',  # PE executable
    b'PK\x03\x04',  # ZIP
    b'%PDF',  # PDF
    b'VIRUS',  # Example string
]
SUSPICIOUS_EXTENSIONS = ['.exe', '.zip', '.pdf', '.scr', '.bat', '.dll']

try:
    import pyclamd
    CLAMD_AVAILABLE = True
    print("ClamAV support enabled.")
except ImportError:
    CLAMD_AVAILABLE = False

def scan_file(filepath):
    # Try ClamAV first
    if CLAMD_AVAILABLE:
        try:
            cd = pyclamd.ClamdAgnostic()
            if cd.ping():
                result = cd.scan_file(filepath)
                if result:
                    return True, str(result)
        except Exception as e:
            ctx.log.warn(f"[ClamAV Error] {e}")
    # Fallback: simple static scan
    with open(filepath, 'rb') as f:
        data = f.read(4096)
        for pattern in MALWARE_PATTERNS:
            if pattern in data:
                return True, f"Pattern {pattern}"
    return False, None

def is_download(flow):
    cd = flow.response.headers.get('content-disposition', '').lower()
    if 'attachment' in cd:
        return True
    url = flow.request.pretty_url.lower()
    for ext in SUSPICIOUS_EXTENSIONS:
        if url.endswith(ext):
            return True
    return False

class MalwareScanner:
    def __init__(self, report):
        self.report = report

    def response(self, flow):
        if is_download(flow):
            self.report['downloads_scanned'] += 1
            with tempfile.NamedTemporaryFile(delete=False) as tmp:
                tmp.write(flow.response.content)
                tmp_path = tmp.name
            try:
                found, reason = scan_file(tmp_path)
                if found:
                    ctx.log.warn(f"[Malware Detected] {flow.request.pretty_url} Reason: {reason}")
                    self.report['malware_found'].append((flow.request.pretty_url, reason))
                    flow.response.content = b"Blocked: Malware detected."
                else:
                    ctx.log.info(f"[Download Clean] {flow.request.pretty_url}")
            finally:
                os.remove(tmp_path)

def load(l):
    if not hasattr(ctx, 'report'):
        ctx.report = {'phishing_urls': [], 'suspicious_js': [], 'unexpected_redirects': [], 'malware_found': [], 'downloads_scanned': 0}
    l.addons.add(MalwareScanner(ctx.report))
